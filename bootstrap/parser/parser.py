import pickle
from tokens import *

table = pickle.loads(b'\x80\x03}q\x00(K\x00}q\x01(X\x06\x00\x00\x00Stringq\x02X\x02\x00\x00\x0051q\x03X\x04\x00\x00\x00trueq\x04X\x03\x00\x00\x00s49q\x05X\x04\x00\x00\x00nullq\x06X\x03\x00\x00\x00s47q\x07X\x06\x00\x00\x00Objectq\x08X\x02\x00\x00\x0055q\tX\x05\x00\x00\x00Arrayq\nX\x02\x00\x00\x0056q\x0bX\x03\x00\x00\x00Strq\x0cX\x03\x00\x00\x00s52q\rX\x07\x00\x00\x00Booleanq\x0eX\x02\x00\x00\x0048q\x0fX\x03\x00\x00\x00Numq\x10X\x03\x00\x00\x00s54q\x11X\x04\x00\x00\x00Nullq\x12X\x02\x00\x00\x0046q\x13X\x05\x00\x00\x00Valueq\x14X\x02\x00\x00\x0045q\x15X\x01\x00\x00\x00{q\x16X\x02\x00\x00\x00s1q\x17X\x04\x00\x00\x00Textq\x18X\x02\x00\x00\x0044q\x19X\x06\x00\x00\x00Numberq\x1aX\x02\x00\x00\x0053q\x1bX\x05\x00\x00\x00falseq\x1cX\x03\x00\x00\x00s50q\x1dX\x01\x00\x00\x00[q\x1eX\x02\x00\x00\x00s2q\x1fuK\x01}q (X\x01\x00\x00\x00}q!X\x03\x00\x00\x00s57q"X\n\x00\x00\x00MemberListq#X\x01\x00\x00\x003q$h\x02X\x01\x00\x00\x005q%X\x06\x00\x00\x00Memberq&X\x01\x00\x00\x004q\'h\x0cX\x03\x00\x00\x00s52q(uK\x02}q)(X\x01\x00\x00\x00]q*X\x03\x00\x00\x00s23q+h\x04X\x03\x00\x00\x00s49q,h\x08X\x02\x00\x00\x0055q-h\x02X\x02\x00\x00\x0051q.h\nX\x02\x00\x00\x0056q/h\x12X\x02\x00\x00\x0046q0h\x0eX\x02\x00\x00\x0048q1h\x10X\x03\x00\x00\x00s54q2h\x06X\x03\x00\x00\x00s47q3h\x14X\x02\x00\x00\x0025q4h\x16X\x02\x00\x00\x00s1q5X\x0b\x00\x00\x00ElementListq6X\x02\x00\x00\x0024q7h\x0cX\x03\x00\x00\x00s52q8h\x1aX\x02\x00\x00\x0053q9h\x1cX\x03\x00\x00\x00s50q:h\x1eX\x02\x00\x00\x00s2q;uK\x03}q<(h!X\x03\x00\x00\x00s58q=X\x01\x00\x00\x00,q>X\x02\x00\x00\x00s6q?uK\x04}q@(h!X\x03\x00\x00\x00r10qAh>X\x03\x00\x00\x00r10qBuK\x05}qCX\x01\x00\x00\x00:qDX\x02\x00\x00\x00s8qEsK\x06}qF(h\x0cX\x03\x00\x00\x00s52qGh&X\x01\x00\x00\x007qHh\x02h%uK\x07}qI(h!X\x03\x00\x00\x00r11qJh>X\x03\x00\x00\x00r11qKuK\x08}qL(h\x02X\x02\x00\x00\x0051qMh\x04X\x03\x00\x00\x00s49qNh\x08X\x02\x00\x00\x0055qOh\nX\x02\x00\x00\x0056qPh\x0eX\x02\x00\x00\x0048qQh\x10X\x03\x00\x00\x00s54qRh\x06X\x03\x00\x00\x00s47qSh\x14X\x01\x00\x00\x009qTh\x16X\x02\x00\x00\x00s1qUh\x12X\x02\x00\x00\x0046qVh\x0cX\x03\x00\x00\x00s52qWh\x1aX\x02\x00\x00\x0053qXh\x1cX\x03\x00\x00\x00s50qYh\x1eX\x02\x00\x00\x00s2qZuK\t}q[(h!X\x02\x00\x00\x00r9q\\h>X\x02\x00\x00\x00r9q]uK\n}q^(h!X\x03\x00\x00\x00r16q_h>X\x03\x00\x00\x00r16q`uK\x0b}qa(h!X\x02\x00\x00\x00r4qbh>X\x02\x00\x00\x00r4qcuK\x0c}qd(h!X\x03\x00\x00\x00r17qeh>X\x03\x00\x00\x00r17qfuK\r}qg(h!X\x02\x00\x00\x00r5qhh>X\x02\x00\x00\x00r5qiuK\x0e}qj(h!X\x02\x00\x00\x00r6qkh>X\x02\x00\x00\x00r6qluK\x0f}qm(h!X\x03\x00\x00\x00r18qnh>X\x03\x00\x00\x00r18qouK\x10}qp(h!X\x02\x00\x00\x00r2qqh>X\x02\x00\x00\x00r2qruK\x11}qs(h!X\x03\x00\x00\x00r19qth>X\x03\x00\x00\x00r19quuK\x12}qv(h!X\x02\x00\x00\x00r3qwh>X\x02\x00\x00\x00r3qxuK\x13}qy(h!X\x03\x00\x00\x00r20qzh>X\x03\x00\x00\x00r20q{uK\x14}q|(h!X\x03\x00\x00\x00r21q}h>X\x03\x00\x00\x00r21q~uK\x15}q\x7f(h!X\x02\x00\x00\x00r7q\x80h>X\x02\x00\x00\x00r7q\x81uK\x16}q\x82(h!X\x02\x00\x00\x00r8q\x83h>X\x02\x00\x00\x00r8q\x84uK\x17}q\x85(h!X\x03\x00\x00\x00r12q\x86h*X\x03\x00\x00\x00r12q\x87h>X\x03\x00\x00\x00r12q\x88uK\x18}q\x89(h*X\x03\x00\x00\x00s37q\x8ah>X\x03\x00\x00\x00s38q\x8buK\x19}q\x8c(h*X\x03\x00\x00\x00r14q\x8dh>X\x03\x00\x00\x00r14q\x8euK\x1a}q\x8f(h*X\x03\x00\x00\x00r16q\x90h>X\x03\x00\x00\x00r16q\x91uK\x1b}q\x92(h*X\x02\x00\x00\x00r4q\x93h>X\x02\x00\x00\x00r4q\x94uK\x1c}q\x95(h*X\x03\x00\x00\x00r17q\x96h>X\x03\x00\x00\x00r17q\x97uK\x1d}q\x98(h*X\x02\x00\x00\x00r5q\x99h>X\x02\x00\x00\x00r5q\x9auK\x1e}q\x9b(h*X\x02\x00\x00\x00r6q\x9ch>X\x02\x00\x00\x00r6q\x9duK\x1f}q\x9e(h*X\x03\x00\x00\x00r18q\x9fh>X\x03\x00\x00\x00r18q\xa0uK }q\xa1(h*X\x02\x00\x00\x00r2q\xa2h>X\x02\x00\x00\x00r2q\xa3uK!}q\xa4(h*X\x03\x00\x00\x00r19q\xa5h>X\x03\x00\x00\x00r19q\xa6uK"}q\xa7(h*X\x02\x00\x00\x00r3q\xa8h>X\x02\x00\x00\x00r3q\xa9uK#}q\xaa(h*X\x03\x00\x00\x00r20q\xabh>X\x03\x00\x00\x00r20q\xacuK$}q\xad(h*X\x03\x00\x00\x00r21q\xaeh>X\x03\x00\x00\x00r21q\xafuK%}q\xb0(h!X\x03\x00\x00\x00r13q\xb1h*X\x03\x00\x00\x00r13q\xb2h>X\x03\x00\x00\x00r13q\xb3uK&}q\xb4(h\x02X\x02\x00\x00\x0051q\xb5h\x04X\x03\x00\x00\x00s49q\xb6h\x08X\x02\x00\x00\x0055q\xb7h\x06X\x03\x00\x00\x00s47q\xb8h\nX\x02\x00\x00\x0056q\xb9h\x12X\x02\x00\x00\x0046q\xbah\x10X\x03\x00\x00\x00s54q\xbbh\x0eX\x02\x00\x00\x0048q\xbch\x14X\x02\x00\x00\x0039q\xbdh\x16X\x02\x00\x00\x00s1q\xbeh\x0cX\x03\x00\x00\x00s52q\xbfh\x1aX\x02\x00\x00\x0053q\xc0h\x1cX\x03\x00\x00\x00s50q\xc1h\x1eX\x02\x00\x00\x00s2q\xc2uK\'}q\xc3(h*X\x03\x00\x00\x00r15q\xc4h>X\x03\x00\x00\x00r15q\xc5uK(}q\xc6(h*X\x02\x00\x00\x00r7q\xc7h>X\x02\x00\x00\x00r7q\xc8uK)}q\xc9(h*X\x02\x00\x00\x00r8q\xcah>X\x02\x00\x00\x00r8q\xcbuK*}q\xcc(h*X\x03\x00\x00\x00r12q\xcdh>X\x03\x00\x00\x00r12q\xceuK+}q\xcf(h*X\x03\x00\x00\x00r13q\xd0h>X\x03\x00\x00\x00r13q\xd1uK,}q\xd2X\x03\x00\x00\x00EOFq\xd3X\x03\x00\x00\x00accq\xd4sK-}q\xd5K.}q\xd6(h!X\x03\x00\x00\x00r16q\xd7h*X\x03\x00\x00\x00r16q\xd8h>X\x03\x00\x00\x00r16q\xd9uK/}q\xda(h!X\x02\x00\x00\x00r4q\xdbh*X\x02\x00\x00\x00r4q\xdch>X\x02\x00\x00\x00r4q\xdduK0}q\xde(h!X\x03\x00\x00\x00r17q\xdfh*X\x03\x00\x00\x00r17q\xe0h>X\x03\x00\x00\x00r17q\xe1uK1}q\xe2(h!X\x02\x00\x00\x00r5q\xe3h*X\x02\x00\x00\x00r5q\xe4h>X\x02\x00\x00\x00r5q\xe5uK2}q\xe6(h!X\x02\x00\x00\x00r6q\xe7h*X\x02\x00\x00\x00r6q\xe8h>X\x02\x00\x00\x00r6q\xe9uK3}q\xea(h!X\x03\x00\x00\x00r18q\xebh*X\x03\x00\x00\x00r18q\xech>X\x03\x00\x00\x00r18q\xeduK4}q\xee(h!X\x02\x00\x00\x00r2q\xefh*X\x02\x00\x00\x00r2q\xf0hDX\x02\x00\x00\x00r2q\xf1h>X\x02\x00\x00\x00r2q\xf2uK5}q\xf3(h!X\x03\x00\x00\x00r19q\xf4h*X\x03\x00\x00\x00r19q\xf5h>X\x03\x00\x00\x00r19q\xf6uK6}q\xf7(h!X\x02\x00\x00\x00r3q\xf8h*X\x02\x00\x00\x00r3q\xf9h>X\x02\x00\x00\x00r3q\xfauK7}q\xfb(h!X\x03\x00\x00\x00r20q\xfch*X\x03\x00\x00\x00r20q\xfdh>X\x03\x00\x00\x00r20q\xfeuK8}q\xff(h!X\x03\x00\x00\x00r21r\x00\x01\x00\x00h*X\x03\x00\x00\x00r21r\x01\x01\x00\x00h>X\x03\x00\x00\x00r21r\x02\x01\x00\x00uK9}r\x03\x01\x00\x00(h!X\x02\x00\x00\x00r7r\x04\x01\x00\x00h*X\x02\x00\x00\x00r7r\x05\x01\x00\x00h>X\x02\x00\x00\x00r7r\x06\x01\x00\x00uK:}r\x07\x01\x00\x00(h!X\x02\x00\x00\x00r8r\x08\x01\x00\x00h*X\x02\x00\x00\x00r8r\t\x01\x00\x00h>X\x02\x00\x00\x00r8r\n\x01\x00\x00uu.')

def get_column(token):
    if type(token) is TSymbol:
        return token.char
    elif type(token) is TString:
        return "Str"

def parse_from_tokens(lexer):
    stack = [0]
    token = lexer.next()

    shifted_token = None
    while True:
        if token is None:
            raise Exception("unexpected end of input")
        if type(token) is TNEWLINE:
            token = lexer.next()
            continue
        state = stack[-1]
        column = get_column(token)
        state = table.get(state)
        if column not in state:
            print(state.keys())
            raise Exception("unexpected token {} (column = {})".format(token, column))
        
        entry = state[column]
        if entry[0] == "s":
            stack.append(token)
            stack.append(int(entry[1:]))
            shifted_token = token
            token = lexer.next()
        print(stack)