use ast::{Expr, Program, Stmt};
use lexer::{LexError, Number, Token};

grammar<'input>;

Expr: Expr<'input> = {
    <number:"Number"> => Expr::Number(number),
};

Stmt: Stmt<'input> = {
    <e:Expr> => Stmt::Expr(e),
};

Stmts: Vec<Stmt<'input>> =
    <v0:(<Stmt> "Newline")*> <e1:Stmt?> => v0.into_iter().chain(e1).collect();

pub Line: Stmt<'input> =
    <s:Stmt> <x:"EOF"?> => s;

pub Program: Program = {
    <v:Stmts> <x:"EOF"?> => Program {},
};

extern {
    type Location = usize;
    type Error = LexError;

    enum Token<'input> {
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "EOF" => Token::EOF,
        "Newline" => Token::Newline,
        "Colon" => Token::Symbol(<&'input str>),

        "Number" => Token::Number(<Number>),
    }
}
